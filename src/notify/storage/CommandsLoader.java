/* @@author A0124072 */
package notify.storage;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;

import notify.logic.command.Action;

/**
 * CommandsLoader class extends the abstract class StrorageOperation.
 * This class is responsible for reading the command text files and storing the content
 * of those files into the HashMap<String, Action> data-structure which contains the command variations, 
 * which is in turn retrieved and used by the Parser component.
 * The command text files are located at <tt>notify.config/commands/</tt> directory, which are
 * auto-generated by the FileGenerator class.
 */
public class CommandsLoader extends StorageOperation {
	
	/** Constructor */
	protected CommandsLoader() {
		this.commands = new HashMap<String, Action>();
	}
	
	/** 
	 * This method is the main method invoked by the Storage class in order to pre-populate the 
	 * HashMap<String, Action> data-structure which contains the command variations.
	 * 
	 * @param emptyList_	An empty ArrayList<task>
	 * 
	 * @return commands		A HashMap<String, Action> object which contains the command variations
	 */
	protected HashMap<String, Action> execute(Object emptyList_) {
		assert emptyList_ != null;
		
		readFromFile();
		
		assert (this.commands.isEmpty() == false);
		return this.commands;
	}
	
	/** 
	 * This method is used to set the directory/path of the file which is read from.
	 * 
	 * @param filePath_		The new file directory/path of the file which is read from.
	 */
	protected void setFilePath (String filePath_) {
		assert filePath_ != null;
		this.filePath = filePath_;
	}
	
	/** 
	 * This method is used to read the contents of the command text files located at 
	 * <tt>notify.config/commands/</tt> directory.
	 */
	private void readFromFile() {
		String currentLine;
		File file;
		
		for (Action command : Action.values()) {
			try {
				this.filePath = String.format(Constants.PATH_COMMAND_FILE,
											  Constants.FOLDER_CONFIG,Constants.FOLDER_COMMANDS,
											  command.toString().toLowerCase(), Constants.EXTENSION_FILE);
				
				file = new File(this.filePath);
				
				assert (file.exists() == true);
				
				FileReader fileReader = new FileReader(file);
				BufferedReader bufferedReader = new BufferedReader(fileReader);
				
				assert (this.commands != null);
				
				this.commands.put(command.toString().toUpperCase(), command);
				while((currentLine = bufferedReader.readLine()) != null) {
					this.commands.put(currentLine.toUpperCase() , command);
				}
				
				bufferedReader.close();
				fileReader.close();
			} catch (IOException e) {
	            e.printStackTrace();
	        }
		}
	}
}
